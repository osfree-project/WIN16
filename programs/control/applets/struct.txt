#include <cpl. h>
typedef struct tagCPLINFO
{
	int idIcon;
	int idName;
	int idInfo;
	LONG lData;
} CPLINFO;

typedef struct tagNEWCPLINFO {
DWORD dwSize;
DWORD dwFlags;
DWORD dwHelpContext;
LONG lData;
HICON hlcon;
char szName[32];
char szInfo[64];
char szHelpFile[128];
} NEWCPLINFO;

CPIAppiet 3.1
Syntax LONG CALLBACK* CPIApplet(hwndCPI, iMessage, IParaml, IParam2)
TApplet_Proc = function(hWndCpl: HWnd; msg: Word; IParaml,
IParam2: Longint): Longint;
The CPIAppiet function serves as the entry point for a Control Panel
dynamic-link library (OLL). This function is supplied by the application.
Parameters hwndCPl
iMessage
IParaml
IParam2
Identifies the main Control Panel window.
Specifies the message being sent to the OLL.
Specifies 32 bits of additional message-dependent
information.
Specifies 32 bits of additional message-dependent
information.
Return Value The return value depends on the message.
Comments Use the hwndCPl parameter for dialog boxes or other windows that
require a handle of a parent window.

{*******************************************************}
{                                                       }
{       Turbo Pascal for Windows Run-time Library       }
{       Windows 3.1 API Interface Unit                  }
{       Control panel extension DLL definitions         }
{                                                       }
{       Copyright (c) 1992 Borland International        }
{                                                       }
{*******************************************************}
{******************************************************************************
*  General rules for being installed in the Control Panel:
*
*      1) The DLL must export a function named CPlApplet which will handle
*         the messages discussed below.
*      2) If the applet needs to save information in CONTROL.INI minimize
*         clutter by using the application name [MMCPL.appletname].
*      2) If the applet is referenced in CONTROL.INI under [MMCPL] use
*         the following form:
*              ...
*              [MMCPL]
*              uniqueName=c:\mydir\myapplet.dll
*              ...
*
*
*  The order applet DLL's are loaded by CONTROL.EXE is:
*
*      1) MAIN.CPL is loaded from the windows system directory.
*
*      2) Installable drivers that are loaded and export the
*         CplApplet() routine.
*
*      3) DLL's specified in the [MMCPL] section of CONTROL.INI.
*
*      4) DLL's named *.CPL from windows system directory.
*
}

{
 * CONTROL.EXE will answer this message and launch an applet
 *
 * WM_CPL_LAUNCH
 *
 *      wParam      - window handle of calling app
 *      lParam      - LPSTR of name of applet to launch
 *
 * WM_CPL_LAUNCHED
 *
 *      wParam      - TRUE/FALSE if applet was launched
 *      lParam      - NULL
 *
 * CONTROL.EXE will post this message to the caller when the applet returns
 * (ie., when wParam is a valid window handle)
 *
 }

unit Cpl;

interface

uses WinTypes;

const
  wm_CPL_Launch   = wm_User+1000;
  wm_CPL_Launched = wm_User+1001;

{ A function prototype for CPlApplet() }

type
  TApplet_Proc = function(hWndCpl: HWnd; msg: Word;
    lParam1, lParam2: Longint): Longint;

{ The data structure CPlApplet() must fill in. }

type
  PCPLInfo = ^TCPLInfo;
  TCPLInfo = record
    idIcon: Integer;     { icon resource id, provided by CPlApplet() }
    idName: Integer;     { name string res. id, provided by CPlApplet() }
    idInfo: Integer;     { info string res. id, provided by CPlApplet() }
    lData: Longint;      { user defined data }
  end;

type
  PNewCPLInfo = ^TNewCPLInfo;
  TNewCPLInfo = record
    dwSize: Longint;                   { similar to the commdlg }
    dwFlags: Longint;
    dwHelpContext: Longint;            { help context to use }
    lData: Longint;                    { user defined data }
    Icon: HIcon;          { icon to use, this is owned by CONTROL.EXE (may be deleted) }
    szName: array[0..31] of Char;      { short name }
    szInfo: array[0..63] of Char;      { long name (status line) }
    szHelpFile: array[0..127] of Char; { path to help file to use }
  end;


{ The messages CPlApplet() must handle: }

const
  cpl_Init        = 1;
{  This message is sent to indicate CPlApplet() was found. }
{  lParam1 and lParam2 are not defined. }
{  Return TRUE or FALSE indicating whether the control panel should proceed. }


const
  cpl_GetCount    = 2;
{  This message is sent to determine the number of applets to be displayed. }
{  lParam1 and lParam2 are not defined. }
{  Return the number of applets you wish to display in the control }
{  panel window. }


const
  cpl_Inquire     = 3;
{  This message is sent for information about each applet. }
{  lParam1 is the applet number to register, a value from 0 to }
{  (CPL_GETCOUNT - 1).  lParam2 is a far ptr to a CPLINFO structure. }
{  Fill in CPL_INFO's idIcon, idName, idInfo and lData fields with }
{  the resource id for an icon to display, name and description string ids, }
{  and a long data item associated with applet #lParam1. }


const
  cpl_Select      = 4;
{  This message is sent when the applet's icon has been clicked upon. }
{  lParam1 is the applet number which was selected.  lParam2 is the }
{  applet's lData value. }


const
  cpl_DblClk      = 5;
{  This message is sent when the applet's icon has been double-clicked }
{  upon.  lParam1 is the applet number which was selected.  lParam2 is the }
{  applet's lData value. }
{  This message should initiate the applet's dialog box. }


const
  cpl_Stop        = 6;
{  This message is sent for each applet when the control panel is exiting. }
{  lParam1 is the applet number.  lParam2 is the applet's lData  value. }
{  Do applet specific cleaning up here. }


const
  cpl_Exit        = 7;
{  This message is sent just before the control panel calls FreeLibrary. }
{  lParam1 and lParam2 are not defined. }
{  Do non-applet specific cleaning up here. }


const
  cpl_NewInquire  = 8;
{ this is the same as CPL_INQUIRE execpt lParam2 is a pointer to a }
{ NEWCPLINFO structure.  this will be sent before the CPL_INQUIRE }
{ and if it is responed to (return <> 0) CPL_INQUIRE will not be sent }

implementation

end.


-----------------------------------------

CodeNet - все для программиста!
Все для программиста!

    Статьи
    Форум
    Исходники
    Каталог
    Хостинг
    Утилиты

Справочник функций
Ваш аккаунт
Войти через: 
Логин:
Пароль:
Запомнить меня
Забыли пароль?
Регистрация
Информацию о новых материалах можно получать и без регистрации:
RSS
Twitter
ВКонтакте
Последние темы форума

    Музыка — 2019-04-26 23:59:43 (1)
    Общалка :) / Кристина Ивлеева
    Как внести числа в сгенерированный массив чисел СЛУЧМЕЖДУ — 2019-04-25 11:15:30 (0)
    Visual Basic / wanx
    рабочее зеркало гидры — 2019-04-22 13:27:49 (1)
    Операционные системы / Tony_Montana
    гидра анонимный — 2019-04-21 15:37:08 (0)
    Низкоуровневое программирование / Tony_Montana
    гидра браузер — 2019-04-21 11:49:42 (0)
    Компьютерная безопасность / Tony_Montana
    Закрытие главной формы из другой. — 2019-04-19 09:08:27 (1)
    Borland C++ Builder / Lazy_Man
    гидра оф сайт — 2019-04-18 13:15:50 (0)
    Студентам / Tony_Montana
    Информация про криптовалюту. — 2019-04-18 04:38:31 (6)
    Общалка :) / PotapShavanov
    ссылка на гидру зеркало — 2019-04-17 11:53:53 (0)
    Базы данных / Tony_Montana
    гидра сайт доверенных — 2019-04-16 13:58:20 (0)
    Фриланс / Tony_Montana
    Delphi Trichview замена текста — 2019-04-16 13:02:35 (0)
    Delphi & Kylix / ale-sumkin
    Реально ли заработать на ставках? — 2019-04-16 07:34:02 (5)
    Общалка :) / Polernik

Показать новые сообщения »
Почтовая рассылка
Подписаться
Отписаться
Подписчиков: -1
Последний выпуск: 19.06.2015
CodeNet / Языки программирования / Delphi & Kylix / Приложения и распространение программ
CodeNet / Платформы / Windows / Администрирование
Свои апплеты в панели управления
Источник: www.исходники.ru

Апплеты в панели управления, это обычные DLL, имеющие расширение .cpl (Control Panel Library) и располагающиеся в системной директории Windows. В свою очередь, в каждом файле cpl может храниться несколько апплетов. Cpl имеет единственную функцию точки входа CPlApplet(), через которую поступают все сообщения от панели управления.

Давайте рассмотрим сообщения, с которыми панель управления вызывает функцию CPlApplet():

    CPL_INIT - сообщение, которым CPlApplet() вызывается первый раз (инициализация). Возвращаем TRUE для продолжения процесса загрузки.
    CPL_GETCOUNT - этим сообщением панель управления запрашивает количество поддерживаемых апплетов в файле cpl.
    CPL_INQUIRE - панель управления запрашивает информацию о каждом апплете, хранящемся в файле cpl. При этом, параметр lParam1 будет содержать номер апплета, о котором панель управления хочет получить информацию, lParam2 будет указывать на структуру TCplInfo. Поле idIcon в структуре TClpInfo должно содержать идентификатор (id) ресурса иконки, которая будет отображаться в панели управления, а поля idName и idInfo должны содержать идентификаторы строковых ресурсов для имени и описания. lData может содержать данные, которые будут использоваться апплетом.
    CPL_SELECT - это сообщение посылается апплету, если его иконка была выбрана пользователем. При этом lParam1 содержит номер выбранного апплета, а lParam2 содержит значение lData, определённое для данного апплета.
    CPL_DBLCLK - это сообщение будет послано, если по иконке апплета сделать двойной щелчёк. lParam1 будет содержать номер апплета, а lParam2 будет содержать значение lData, определённое для данного апплета. При поступление это сообщения апплет должен как-то показать себя, в частности отобразить своё диалоговое окно.
    CPL_STOP - Посылается каждому апплету, когда панель управления закрывается. lParam1 содержит номер апплета, а lParam2 содержит значение lData, определённое для данного апплета.
    CPL_EXIT - Посылается перед тем, как панель управления вызовет FreeLibrary.
    CPL_NEWINQUIRE - тоже, что и CPL_INQUIRE за исключением того, что lParam2 указывает на структуру NEWCPLINFO. 

Итак, приступим. Для начала необходимо создать файл ресурсов, содержащий таблицу строк для имени и описания Вашего апплета(ов), а также иконки для каждого апплета (если у Вас их будет несколько).

Пример .rc файла содержит таблицу строк, состоящую из двух строк, и указатель на файл с иконкой:

STRINGTABLE
{
 1, "TestApplet"
 2, "My Test Applet"
}

2 ICON C:\SOMEPATH\CHIP.ICO

Чтобы преобразовать файл .rc в .res, (который можно будет спокойно прилинковать к Вашему приложению) достаточно просто указать в командной строке полный путь до компилятора ресурсов и полный путь до файла .rc:

c:\Delphi\Bin\brcc32.exe c:\Delphi\MyRes.rc

После того, как компиляция будет завершена, то Вы получите новый файл, с таким же именем, что и .rc, только с расширением ".res".

Следующий пример, это апплет панели управления, который в ответ на сообщение CPL_DBLCLK запускает блокнот. Код можно легко изменить, чтобы отображалась форма или диалоговое окошко. Этот код можно компилировать как под платформу Win32, так и под Win16.

Чтобы скомпилировать проект, необходимо из вышеприведённого файла .rc создать два: TCPL32.RES и TCPL16.RES.

Пример:

library TestCpl;

{$IFDEF WIN32}
uses
  SysUtils,
  Windows,
  Messages;
{$ELSE}
uses
  SysUtils,
  WinTypes,
  WinProcs,
  Messages;
{$ENDIF}

{$IFDEF WIN32}
 {$R TCPL32.RES}
{$ELSE}
 {$R TCPL16.RES}
{$ENDIF}

const NUM_APPLETS = 1;

{$IFDEF WIN32}
 const CPL_DYNAMIC_RES = 0;
{$ENDIF}
const CPL_INIT = 1;
const CPL_GETCOUNT = 2;
const CPL_INQUIRE = 3;
const CPL_SELECT = 4;
const CPL_DBLCLK = 5;
const CPL_STOP = 6;
const CPL_EXIT = 7;
const CPL_NEWINQUIRE = 8;
{$IFDEF WIN32}
 const CPL_STARTWPARMS = 9;
{$ENDIF}
const CPL_SETUP = 200;

{$IFNDEF WIN32}
type DWORD = LongInt;
{$ENDIF}

type TCplInfo = record
       idIcon : integer;
       idName : integer;
       idInfo : integer;
       lData : LongInt;
     end;
     PCplInfo = ^TCplInfo;

type TNewCplInfoA = record
       dwSize : DWORD;
       dwFlags : DWORD;
       dwHelpContext : DWORD;
       lData : LongInt;
       IconH : HIcon;
       szName : array [0..31] of char;
       szInfo : array [0..63] of char;
       szHelpFile : array [0..127] of char;
     end;
     PNewCplInfoA = ^TNewCplInfoA;

{$IFDEF WIN32}
type TNewCplInfoW = record
       dwSize : DWORD;
       dwFlags : DWORD;
       dwHelpContext : DWORD;
       lData : LongInt;
       IconH : HIcon;
       szName : array [0..31] of WChar;
       szInfo : array [0..63] of WChar;
       szHelpFile : array [0..127] of WChar;
     end;
     PNewCplInfoW = ^TNewCplInfoW;
{$ENDIF}

type TNewCplInfo = TNewCplInfoA;
type PNewCplInfo = ^TNewCplInfoA;

function CPlApplet(hWndCPL : hWnd;
                   iMEssage : integer;
                   lParam1 : longint;
                   lParam2 : longint) : LongInt
{$IFDEF WIN32} stdcall; {$ELSE} ; export; {$ENDIF}
begin
  case iMessage of
    CPL_INIT : begin
      Result := 1;
      exit;
    end;
    CPL_GetCount : begin
      Result := NUM_APPLETS;
      exit;
    end;
    CPL_Inquire : begin
      PCplInfo(lParam2)^.idIcon := 2;
      PCplInfo(lParam2)^.idName := 1;
      PCplInfo(lParam2)^.idInfo := 2;
      PCplInfo(lParam2)^.lData := 0;
      Result := 1;
      exit;
    end;
    CPL_NewInquire : begin
      PNewCplInfo(lParam2)^.dwSize := sizeof(TNewCplInfo);
      PNewCplInfo(lParam2)^.dwHelpContext := 0;
      PNewCplInfo(lParam2)^.lData := 0;
      PNewCplInfo(lParam2)^.IconH := LoadIcon(hInstance,
                                              MakeIntResource(2));
      lStrCpy(@PNewCplInfo(lParam2)^.szName, 'TestCPL');
      lStrCpy(PNewCplInfo(lParam2)^.szInfo, 'My Test CPL');
      PNewCplInfo(lParam2)^.szHelpFile[0] := #0;
      Result := 1;
      exit;
    end;
    CPL_SELECT : begin
      Result := 0;
      exit;
    end;
    CPL_DBLCLK : begin
        WinExec('Notepad.exe', SW_SHOWNORMAL);
      Result := 1;
      exit;
    end;
    CPL_STOP : begin
      Result := 0;
      exit;
    end;
    CPL_EXIT : begin
      Result := 0;
      exit;
    end else begin
      Result := 0;
      exit;
    end;
  end;
end;

exports CPlApplet name 'CPlApplet';

begin
end.

Оставить комментарий
Комментарий:
можно использовать BB-коды
Максимальная длина комментария - 4000 символов.
	
CodeNet
ВКонтакте
Google
Яндекс
 	
Реклама на сайте | Обмен ссылками | Ссылки | Экспорт (RSS) | Контакты
Добавить статью | Добавить исходник | Добавить хостинг-провайдера | Добавить сайт в каталог

------------------------------------------
https://archive.org/details/win_dos_dev_jrnl_v4n7_jul_93
https://books.google.ru/books?id=AghQgqwUzgUC&pg=PA259&lpg=PA259&dq=CPLApplet+windows+3.1&source=bl&ots=VHC93rDl1C&sig=ACfU3U25NtxxTxb7t86OYGMQv0KDToowpA&hl=ru&sa=X&ved=2ahUKEwiH8daw7sqBAxVJEBAIHbMcDV84RhDoAXoECAIQAw#v=onepage&q=CPLApplet%20windows%203.1&f=false
