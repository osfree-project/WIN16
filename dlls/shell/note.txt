===============================================================================
reg.txt      osFree      Windows 3.x SHELL.DLL                      17-Oct-2023
===============================================================================

This document composed using WinReg.txt file found in Internet signed by B.D.
and from Wine source of 1990th by Tor Sjoewall (sorry, don't know correct
transletion to English). And some my research also added.

Windows Registration Database
=============================

+-tabent[0]-+
| next rec. |---+			+----->	+tabent[key]-+
| first sub |   |			|	| Usage cnt. |
| name      |	|  +-->	+tabent[child]	|	| length     |
| value     |	|  |	| next rec.  |	|	| text       |------->	+-------+
+-----------+	|  |	| name rec.  |--+	+------------+		| xxxxx |
   +------------+  |	| value rec. |-------->	+------------+		+-------+
   v		   |	+------------+		| Usage cnt. |
+-----------+	   |				| length     |
| next rec. |	   |				| text       |------->	+-------+
| first sub |------+				+------------+		| xxxxx |
| name      |								+-------+
| value     |
+-----------+	

Windows Registry REG.DAT file consist of 3 parts:

a header
a table of 8-byte entries that is a combined hash table and tree description
a text table

/* reg.dat header format */
struct _w31_header {
    char		cookie[8];	/* 'SHCC3.10' */
    unsigned long	taboff1;	/* offset of hash table (??) = 0x20 */
    unsigned long	taboff2;	/* offset of index table (??) = 0x20 */
    unsigned long	tabcnt;		/* number of entries in index table */
    unsigned long	textoff;	/* offset of text part */
    unsigned long	textsize;	/* byte size of text part */
    unsigned short	hashsize;	/* hash size */
    unsigned short	freeidx;	/* free index */
};

taboff1 and taboff2 is same, so it is not known which offset for which table.
Also one of offset can be just size of header.

After header comes table of 8 byte long blocks.

    tabent[0] is a root index. The second word has the index of the root of
            the directory.
    tabent[1..hashsize] is a hash table. The first word in the hash entry is
            the index of the key/value that has that hash. Data with the same
            hash value are on a circular list. The other three words in the
            hash entry are always zero.
    tabent[hashsize..tabcnt] is the tree structure. There are two kinds of
            entry: dirent and keyent/valent. They are identified by context.
    tabent[freeidx] is the first free entry. The first word in a free entry
            is the index of the next free entry. The last has 0 as a link.
            The other three words in the free list are probably irrelevant.

/* directory tabent: */
struct _w31_dirent {
    unsigned short	sibling_idx;	/* table index of sibling dirent */
    unsigned short	child_idx;	/* table index of child dirent */
    unsigned short	key_idx;	/* table index of key keyent */
    unsigned short	value_idx;	/* table index of value valent */
};

The values are the locical number of the block inside the file:

	offset=blocksize*blocknumber+headersize

since 2 of this values are constant:

	offset=8*blocknumber+0x20


HKEY_CLASSES_ROOT is a root of registry tree. 0 or 1 is a value of
HKEY_CLASSES_ROOT under Windows 3.x. Internally HKEY_CLASSES_ROOT
mapped to ".classes". So, .classes is a root entry of registry.

Hash function is very simple

hashindex=sum(toupper(s)) % hashsize

.classes has hash equal to 0x11. It is stored in tabent[0x11+0x1]

0x1 here added because tabent[0x0] used as root of registry tree.


Adding value to Registry
========================

First of all, calculate hash of key. Check tabent[hash+1]. If it zero, then
need to add new string to strings.


/******************************************************************/
/* WINDOWS 31 REGISTRY LOADER, supplied by Tor Sjoewall, tor@sn.no */
/*
    reghack - windows 3.11 registry data format demo program.


    The header is obvious from the struct header. The taboff1 and taboff2
    fields are always 0x20, and their usage is unknown.

    The 8-byte entry table has various entry types.


    Entries in text table are preceded by a word at offset-2. This word
    has the value (2*index)+1, where index is the referring keyent/valent
    entry in the table. I have no suggestion for the 2* and the +1.
    Following the word, there are N bytes of data, as per the keyent/valent
    entry length. The offset of the keyent/valent entry is from the start
    of the text table to the first data byte.

    This information is not available from Microsoft. The data format is
    deduced from the reg.dat file by me. Mistakes may
    have been made. I claim no rights and give no guarantees for this program.

    Tor Sj?wall, tor@sn.no
*/



/* key tabent: */
struct _w31_keyent {
    unsigned short	hash_idx;	/* hash chain index for string */
    unsigned short	refcnt;		/* reference count */
    unsigned short	length;		/* length of string */
    unsigned short	string_off;	/* offset of string in text table */
};

/* value tabent: */
struct _w31_valent {
    unsigned short	hash_idx;	/* hash chain index for string */
    unsigned short	refcnt;		/* reference count */
    unsigned short	length;		/* length of string */
    unsigned short	string_off;	/* offset of string in text table */
};



/* recursive helper function to display a directory tree  [Internal] */
static void _w31_dumptree(unsigned short idx, char *txt,
                          struct _w31_tabent *tab, struct _w31_header *head,
                          HKEY hkey, ULONG lastmodified, int level)
{
    static const WCHAR classesW[] = {'.','c','l','a','s','s','e','s',0};
    struct _w31_dirent *dir;
    struct _w31_keyent *key;
    struct _w31_valent *val;
    HKEY subkey = 0;
    OBJECT_ATTRIBUTES attr;
    UNICODE_STRING nameW, valueW;
    static WCHAR tail[400];

    attr.Length = sizeof(attr);
    attr.RootDirectory = hkey;
    attr.ObjectName = &nameW;
    attr.Attributes = 0;
    attr.SecurityDescriptor = NULL;
    attr.SecurityQualityOfService = NULL;
    RtlInitUnicodeString( &valueW, NULL );

    while (idx!=0) {
        dir=(struct _w31_dirent*)&tab[idx];

        if (dir->key_idx) {
            DWORD len;
            key = (struct _w31_keyent*)&tab[dir->key_idx];

            RtlMultiByteToUnicodeN( tail, sizeof(tail)-sizeof(WCHAR), &len,
                                    &txt[key->string_off], key->length);
            tail[len/sizeof(WCHAR)] = 0;

            /* all toplevel entries AND the entries in the
             * toplevel subdirectory belong to \SOFTWARE\Classes
             */
            if (!level && !strcmpW(tail,classesW))
            {
                _w31_dumptree(dir->child_idx,txt,tab,head,hkey,lastmodified,level+1);
                idx=dir->sibling_idx;
                continue;
            }

            if (subkey) NtClose( subkey );
            RtlInitUnicodeString( &nameW, tail );
            if (NtCreateKey( &subkey, KEY_ALL_ACCESS, &attr, 0, NULL, 0, NULL )) subkey = 0;

            /* only add if leaf node or valued node */
            if (dir->value_idx!=0||dir->child_idx==0) {
                if (dir->value_idx) {
                    DWORD len;
                    val=(struct _w31_valent*)&tab[dir->value_idx];
                    RtlMultiByteToUnicodeN( tail, sizeof(tail) - sizeof(WCHAR), &len,
                                            &txt[val->string_off], val->length);
                    tail[len/sizeof(WCHAR)] = 0;
                    NtSetValueKey( subkey, &valueW, 0, REG_SZ, tail, len + sizeof(WCHAR) );
                }
            }
        } else TRACE("strange: no directory key name, idx=%04x\n", idx);
        _w31_dumptree(dir->child_idx,txt,tab,head,subkey,lastmodified,level+1);
        idx=dir->sibling_idx;
    }
    if (subkey) NtClose( subkey );
}


/******************************************************************************
 * _w31_loadreg [Internal]
 */
static void _w31_loadreg( const WCHAR *path )
{
    HANDLE                      hf;
    HKEY                        root;
    OBJECT_ATTRIBUTES           attr;
    UNICODE_STRING              nameW;
    struct _w31_header          head;
    struct _w31_tabent*         tab = NULL;
    char*                       txt = NULL;
    unsigned int		len;
    ULONG			lastmodified;
    NTSTATUS                    status;
    IO_STATUS_BLOCK             iosb;
    FILE_POSITION_INFORMATION   fpi;
    FILE_BASIC_INFORMATION      fbi;

    TRACE("(void)\n");

    hf = CreateFileW( path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, 0 );
    if (hf==INVALID_HANDLE_VALUE) return;

    /* read & dump header */
    if (NtReadFile(hf, 0, NULL, NULL, &iosb, 
                   &head, sizeof(head), NULL, NULL) != STATUS_SUCCESS ||
        iosb.Information != sizeof(head))
    {
        ERR("reg.dat is too short.\n");
        goto done;
    }
    if (memcmp(head.cookie, "SHCC3.10", sizeof(head.cookie)) != 0)
    {
        ERR("reg.dat has bad signature.\n");
        goto done;
    }

    len = head.tabcnt * sizeof(struct _w31_tabent);
    /* read and dump index table */
    tab = _xmalloc(len);
    if (NtReadFile(hf, 0, NULL, NULL, &iosb,
                   tab, len, NULL, NULL) != STATUS_SUCCESS ||
        iosb.Information != len) 
    {
        ERR("couldn't read index table (%d bytes).\n",len);
        goto done;
    }

    /* read text */
    txt = _xmalloc(head.textsize);
    fpi.CurrentByteOffset.u.LowPart = head.textoff;
    fpi.CurrentByteOffset.u.HighPart = 0;
    if (NtSetInformationFile(hf, &iosb, &fpi, sizeof(fpi), 
                             FilePositionInformation) != STATUS_SUCCESS)
    {
        ERR("couldn't seek to textblock.\n");
        goto done;
    }
    status = NtReadFile(hf, 0, NULL, NULL, &iosb, txt, head.textsize, NULL, NULL);
    if (!(status == STATUS_SUCCESS || status == STATUS_END_OF_FILE) ||
        iosb.Information != head.textsize)
    {
        ERR("textblock too short (%d instead of %ld).\n", len, head.textsize);
        goto done;
    }
    if (NtQueryInformationFile(hf, &iosb, &fbi, sizeof(fbi),
                               FileBasicInformation) != STATUS_SUCCESS)
    {
        ERR("Couldn't get basic information.\n");
        goto done;
    }
    RtlTimeToSecondsSince1970(&fbi.LastWriteTime, &lastmodified);

    attr.Length = sizeof(attr);
    attr.RootDirectory = 0;
    attr.ObjectName = &nameW;
    attr.Attributes = 0;
    attr.SecurityDescriptor = NULL;
    attr.SecurityQualityOfService = NULL;
    RtlInitUnicodeString( &nameW, ClassesRootW );

    if (!NtCreateKey( &root, KEY_ALL_ACCESS, &attr, 0, NULL, 0, NULL ))
    {
        _w31_dumptree(tab[0].w1,txt,tab,&head,root,lastmodified,0);
        NtClose( root );
    }
 done:
    if (tab) free(tab);
    if (txt) free(txt);
    NtClose(hf);
    return;
}




1. Create key
a) calc hash of key
b) if hash empty, then add block to freeidx, write it to hash table, add string to text block, write new
index.

Most probably, handle is a index in tabent.




Initialization of REG.DAT
=========================

REG.DAT is initially created during DLL Initialization. Name of REG.DAT is taken from String reousrce 208.
Initial content of REG.DAT taken from Resource id=100(9999??). If REG.DAT doesn't exists, then it created from
resource.

Easter Eggs
===========

About dialog contains easter egg. It uses resources 9997 and 9998 for graphics part.
It is animated Logo Flag and Bear, Gates and others.

Resourses
=========

SHELL.DLL contains some resources, used mostly for About Dialog. Interesting thing is
resource 9999 is a empty REG.DAT, used to create initial emoty Registry.

130   OS Logo                Bitmap 64x64 16 colors
9997  OS Flag                Bitmap 129x33 16 colors
9998  Easter Egg             (Gates, other and Bear) Bitmap 171x75 16 colors
100   About Doalog           Standard About Dialog
200   Exe Find Dialog        Dialog shown for associations if not exe found
300   Exe Directory location Locate EXE dialog
208   REG.DAT
209   Real Mode
210   Real Mode (Large Frame EMS)
211   Real Mode (Small Frame EMS)
212   Standard Mode
213   386 Enhanced Mode
215   System Resources
216   Version %s %s
217   (Debug)
218   %s KB Free
219   %s KB Free (%s KB en EMS)
220   %s%% Free
223   Cannot find file %s.
224   (found)
225   (not found)
226   Cannot load COMMDLG.DLL
227   \nSHELL.DLL: RegCloseKey called with no corresponding RegOpenKey
9999  ????

100 100   Empty REG.DAT
1     Version Information Resources
